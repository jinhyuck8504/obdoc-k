'use client'

import React, { useEffect } from 'react'
import HydrationDebugTools from './HydrationDebugTools'
import HTMLValidationDevTool from './HTMLValidationDevTool'
import { hydrationUtils } from '@/lib/hydration/recoveryUtils'

interface HydrationDevProviderProps {
  children: React.ReactNode
  enableDebugTools?: boolean
  enableHTMLValidation?: boolean
  enableConsoleWarnings?: boolean
}

/**
 * Hydration Í∞úÎ∞ú ÎèÑÍµ¨Î•º Ï†úÍ≥µÌïòÎäî Provider Ïª¥Ìè¨ÎÑåÌä∏
 * Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå ÌôúÏÑ±ÌôîÎê©ÎãàÎã§.
 */
export default function HydrationDevProvider({
  children,
  enableDebugTools = true,
  enableHTMLValidation = true,
  enableConsoleWarnings = true
}: HydrationDevProviderProps) {
  const isDevelopment = process.env.NODE_ENV === 'development'

  useEffect(() => {
    if (!isDevelopment) return

    // ÏΩòÏÜî Í≤ΩÍ≥† ÏÑ§Ï†ï
    if (enableConsoleWarnings) {
      setupConsoleWarnings()
    }

    // Hydration Ïò§Î•ò Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
    hydrationUtils.setupHydrationErrorListener()

    // Í∞úÎ∞ú ÎèÑÍµ¨Î•º Ï†ÑÏó≠ Í∞ùÏ≤¥Ïóê Ï∂îÍ∞Ä
    if (typeof window !== 'undefined') {
      (window as any).HydrationDevTools = {
        checkHydrationStatus: hydrationUtils.isHydrating,
        detectDOMInconsistency: hydrationUtils.detectDOMInconsistency,
        validateHTML: () => {
          const { HTMLValidationDevTools } = require('@/lib/hydration/htmlValidator')
          HTMLValidationDevTools.validateCurrentPage()
        },
        clearErrorLogs: () => {
          const { hydrationErrorLogger } = require('@/lib/hydration/errorLogger')
          hydrationErrorLogger.clearStoredLogs()
        },
        getErrorLogs: () => {
          const { hydrationErrorLogger } = require('@/lib/hydration/errorLogger')
          return hydrationErrorLogger.getStoredLogs()
        }
      }

      console.log('üîß Hydration Dev Tools loaded. Use window.HydrationDevTools for manual debugging.')
    }
  }, [isDevelopment, enableConsoleWarnings])

  const setupConsoleWarnings = () => {
    // React DevTools Ïä§ÌÉÄÏùºÏùò Í≤ΩÍ≥† Î©îÏãúÏßÄ
    const originalWarn = console.warn
    const originalError = console.error

    console.warn = (...args) => {
      const message = args[0]
      if (typeof message === 'string') {
        if (message.includes('hydration') || message.includes('Hydration')) {
          console.group('‚ö†Ô∏è Hydration Warning')
          originalWarn.apply(console, args)
          console.log('üí° Tip: Use HydrationBoundary or ClientOnly components to fix this issue')
          console.groupEnd()
          return
        }
      }
      originalWarn.apply(console, args)
    }

    console.error = (...args) => {
      const message = args[0]
      if (typeof message === 'string') {
        if (message.includes('hydration') || message.includes('Hydration')) {
          console.group('üö® Hydration Error')
          originalError.apply(console, args)
          console.log('üîß Debugging tips:')
          console.log('1. Check if server and client render the same content')
          console.log('2. Use suppressHydrationWarning for unavoidable differences')
          console.log('3. Wrap dynamic content with HydrationBoundary')
          console.log('4. Use ClientOnly for browser-specific features')
          console.groupEnd()
          return
        }
      }
      originalError.apply(console, args)
    }
  }

  if (!isDevelopment) {
    return <>{children}</>
  }

  return (
    <>
      {children}
      {enableDebugTools && <HydrationDebugTools />}
      {enableHTMLValidation && <HTMLValidationDevTool />}
    </>
  )
}

/**
 * Hydration ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú Ïú†Ìã∏Î¶¨Ìã∞ Hook
 */
export function useHydrationDebug() {
  const isDevelopment = process.env.NODE_ENV === 'development'

  const logHydrationIssue = (component: string, issue: string, details?: any) => {
    if (!isDevelopment) return

    console.group(`üêõ Hydration Issue in ${component}`)
    console.warn(issue)
    if (details) {
      console.log('Details:', details)
    }
    console.log('Component:', component)
    console.log('Timestamp:', new Date().toISOString())
    console.groupEnd()
  }

  const markHydrationBoundary = (componentName: string) => {
    if (!isDevelopment) return

    console.log(`üîÑ Hydration boundary: ${componentName}`)
  }

  const validateHydrationConsistency = (serverValue: any, clientValue: any, context: string) => {
    if (!isDevelopment) return

    if (JSON.stringify(serverValue) !== JSON.stringify(clientValue)) {
      console.group(`‚ö†Ô∏è Hydration Inconsistency: ${context}`)
      console.log('Server value:', serverValue)
      console.log('Client value:', clientValue)
      console.log('Context:', context)
      console.groupEnd()
    }
  }

  return {
    logHydrationIssue,
    markHydrationBoundary,
    validateHydrationConsistency,
    isDevelopment
  }
}